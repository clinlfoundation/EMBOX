# Generated by GNU Make 4.2.1. Do not edit.

# CACHE_REQUIRES:
#   mk/.cache/mk/mk_model.mk
# CACHE_INCLUDES:
#   mk/mybuild/annotations_core.mk
# MAKEFILE_LIST:
#   mk/.cache/mk/mk_model.mk
#   mk/core/common.mk
#   mk/.cache/mk/mk_core_obj.mk
#   mk/.cache/mk/mk_core_def.mk
#   mk/core/alloc.mk
#   mk/core/common.mk
#   mk/core/define.mk
#   mk/core/string.mk
#   mk/util/var/assign.mk
#   mk/util/var/info.mk
#   mk/core/object.mk
#   mk/model/issue.mk
#   mk/model/linkage.mk
#   mk/model/metamodel.mk
#   mk/model/metamodel_impl.mk
#   mk/model/model.mk
#   mk/model/model_impl.mk
#   mk/model/resource.mk
#   mk/mybuild/annotations_core.mk
#   mk/core/define.mk

ifneq ($(word 2,$(filter mk/.cache/mk/mk_annotations_core.mk,$(MAKEFILE_LIST))),)
$(error Multiple inclusion of 'mk/.cache/mk/mk_annotations_core.mk')
endif

include $(filter-out $(MAKEFILE_LIST),mk/core/common.mk)
include $(filter-out $(MAKEFILE_LIST),mk/.cache/mk/mk_model.mk)

# List of newly cached makefiles.
MAKEFILE_LIST += \
	mk/mybuild/annotations_core.mk

# Transient variables.
__cache_transient := __def_tmp__ __def_inline_tmp__ __argsplit_tmp__ __argfold_tmp__ __def_tmp__ __def_inline_tmp__ __argsplit_tmp__ __argfold_tmp__

# Volatiles variables.
__alloc_cnt_ac-def_aux := \
	.1
__def_done += \
	class-AnnotationsCore \
	class-AnnotationCallback \
	mybuild_annotation_process
__def_ignore += \
	AnnotationsCore \
	AnnotationsCore.% \
	AnnotationCallback \
	AnnotationCallback.%
__def_simples += \
	__cache_volatile_variable___alloc_cnt_e-obj \
	__cache_volatile_variable___alloc_cnt_e-def_aux \
	__mybuild_annotations_core_mk

# New variables.
AnnotationCallback.BuildCallback = $(error Invoking unimplemented abstract method __def_aux26b, declared in class AnnotationCallback)
AnnotationCallback.MyLinkCallback = $(error Invoking unimplemented abstract method __def_aux26b, declared in class AnnotationCallback)
AnnotationCallback.annotationType.getter = $($(__this).annotationType)
AnnotationCallback.annotationType.setter = $(call __field_set$2,annotationType,$1)
AnnotationCallback.callback = $(foreach this,$(__this),$(foreach __this,$(this),$(call $($(__this)).$1Callback,$(value 2))))
AnnotationCallback.fields := annotationType target
AnnotationCallback.maps := options
AnnotationCallback.methods := callback BuildCallback MyLinkCallback
AnnotationCallback.properties := annotationType target
AnnotationCallback.raw_list_fields := 
AnnotationCallback.raw_list_maps := 
AnnotationCallback.raw_scalar_fields := annotationType target
AnnotationCallback.raw_scalar_maps := options
AnnotationCallback.reference_list_fields := 
AnnotationCallback.reference_list_maps := 
AnnotationCallback.reference_scalar_fields := 
AnnotationCallback.reference_scalar_maps := 
AnnotationCallback.supers := 
AnnotationCallback.target.getter = $($(__this).target)
AnnotationCallback.target.setter = $(call __field_set$2,target,$1)
AnnotationCallback := $(\0) map/options property/target getter_stub/target setter_stub/target field/target property/annotationType getter_stub/annotationType setter_stub/annotationType field/annotationType method/callback method_stub/MyLinkCallback method_stub/BuildCallback
AnnotationsCore.addSupported = $(foreach this,$(__this),$(foreach __this,$(this),$(call __map_set,avaibleAnnotations,$1/$2,$(foreach __class__,$(call __class_resolve,$3),$(call __new)))))
AnnotationsCore.fields := 
AnnotationsCore.getSupported = $(foreach this,$(__this),$(value $(this).avaibleAnnotations.$1/$2))
AnnotationsCore.maps := avaibleAnnotations
AnnotationsCore.methods := addSupported getSupported new
AnnotationsCore.new = $(foreach this,$(__this),$(foreach obj,$1,$(foreach __this,$(suffix $(obj)),$(call $($(__this)).target.setter,$2,))$(foreach __this,$(suffix $(obj)),$(call $($(__this)).annotationType.setter,$(foreach __this,$(suffix $(3)),$(call $($(__this)).type.getter)),))$(foreach annotation,$3,$(foreach annotationBinding,$(foreach __this,$(suffix $(annotation)),$(call $($(__this)).bindings.getter)),$(foreach option,$(foreach __this,$(suffix $(annotationBinding)),$(call $($(__this)).option.getter)),$(foreach optionName,$(foreach __this,$(suffix $(option)),$(call $($(__this)).name.getter)),$(foreach optionValue,$(foreach __this,$(suffix $(annotationBinding)),$(call $($(__this)).value.getter)),$(foreach __this,$(suffix $(obj)),$(call __map_set,options,$(optionName),$(foreach __this,$(suffix $(optionValue)),$(call $($(__this)).value.getter)))))))))$(obj)))
AnnotationsCore.properties := 
AnnotationsCore.raw_list_fields := 
AnnotationsCore.raw_list_maps := 
AnnotationsCore.raw_scalar_fields := 
AnnotationsCore.raw_scalar_maps := 
AnnotationsCore.reference_list_fields := 
AnnotationsCore.reference_list_maps := 
AnnotationsCore.reference_scalar_fields := 
AnnotationsCore.reference_scalar_maps := avaibleAnnotations
AnnotationsCore.supers := 
AnnotationsCore := $(\0) map/avaibleAnnotations.AnnotationCallback method/addSupported method/getSupported method/new
annotation_handler_init = $(lastword $(MAKEFILE_LIST))
class-AnnotationCallback = $(eval $(this).options := )$(eval $(this).target := )$(eval $(this).annotationType := )$(\0) 
class-AnnotationsCore = $(eval $(this).avaibleAnnotations := )$(foreach fileMain,$(value 1),$(if $(value $(fileMain)),$(call $(fileMain),$(this))))$(\0) 
__def_aux1ac = $(if $(strip $3),$(foreach __this,$(suffix $(3)),$(call $($(__this)).callback,$1,$4)),$2)
mybuild_annotation_process = $(call __def_aux1ac,$1,$2,$(foreach target,$2,$(foreach annotation,$(foreach __this,$(suffix $(target)),$(call $($(__this)).annotations.getter)),$(foreach annotationType,$(foreach __this,$(suffix $(annotation)),$(call $($(__this)).type.getter)),$(foreach callbackClass,$(foreach __this,$(suffix $(annotationsCore)),$(call $($(__this)).getSupported,$1,$(foreach __this,$(suffix $(annotationType)),$(call $($(__this)).qualifiedName.getter)))),$(foreach __this,$(suffix $(annotationsCore)),$(call $($(__this)).new,$(callbackClass),$(target),$(annotation))))))),$(value 3))
__mybuild_annotations_core_mk := 1

